Menu="Utilities"
Icon="ddns-go.png"
Title="DDns-Go"
Type="xmenu"
Tabs="true"
Markdown="false"
---

<?php
if (!headers_sent()) {
    header('Content-Type: application/json');
}

function sendResponse($success, $message, $status = null) {
    $response = [
        'success' => $success,
        'message' => $message,
        'status'  => $status
    ];
    if (ob_get_level() > 0) ob_clean();
    echo json_encode($response);
    exit;
}

function checkServiceScript() {
    if (!file_exists('/etc/rc.d/rc.ddns-go')) {
        sendResponse(false, "DDNS-Go 服务脚本不存在");
    }
}

function runServiceCommand($cmd) {
    checkServiceScript();
    $output = [];
    $ret = 1;
    exec("/bin/bash /etc/rc.d/rc.ddns-go " . escapeshellarg($cmd) . " 2>&1", $output, $ret);
    return [
        'success' => ($ret === 0),
        'message' => implode("\n", $output)
    ];
}

function getServiceStatus() {
    exec("pidof ddns-go", $output, $ret);
    return ($ret === 0) ? 'running' : 'stopped';
}

if (isset($_GET['action']) && !empty($_GET['action'])) {
    try {
        switch ($_GET['action']) {
            case 'statusService':
                sendResponse(true, "状态检测完成", getServiceStatus());
                break;
            case 'startService':
                $res = runServiceCommand('start');
                sendResponse($res['success'], $res['message'], getServiceStatus());
                break;
            case 'stopService':
                $res = runServiceCommand('stop');
                sendResponse($res['success'], $res['message'], getServiceStatus());
                break;
            case 'restartService':
                $res = runServiceCommand('restart');
                sendResponse($res['success'], $res['message'], getServiceStatus());
                break;
            default:
                sendResponse(false, "未知操作: " . $_GET['action']);
        }
    } catch (Exception $e) {
        sendResponse(false, "操作异常: " . $e->getMessage());
    }
}

$currentStatus = getServiceStatus();
$serverIP = $_SERVER['HTTP_HOST'] ?? getHostByName(getHostName());
if (strpos($serverIP, ':') !== false) { // IPv6
    $serverIP = "[$serverIP]";
}
?>

<script src="/jquery.min.js"></script>
<style>
    .status-indicator { font-weight: bold; transition: all 0.3s ease; }
    .status-running { color: green; }
    .status-stopped { color: red; }
    .status-changing { animation: pulse 1s infinite; }
    @keyframes pulse { 0% {opacity: 1;} 50% {opacity: 0.5;} 100% {opacity: 1;} }
    #controls button { padding: 8px 15px; margin-right: 10px; min-width: 80px; cursor: pointer; }
    #controls button:disabled { opacity: 0.6; cursor: not-allowed; }
    .toast { position: fixed; top: 20px; right: 20px; padding: 12px 18px; background: #333; color: white; border-radius: 4px; opacity: 0; transition: opacity 0.3s; z-index: 1000; }
    .toast.show { opacity: 1; }
    .toast.error { background: #d32f2f; }
</style>

<div>
    <h3>DDNS-Go 服务控制</h3>
    <div class="status-container">
        <span>当前状态: </span>
        <span id="statusDisplay" class="status-indicator status-<?php echo $currentStatus; ?>">
            <?php echo $currentStatus; ?>
        </span>
    </div>
    <p class="webui-link">Web 管理界面: 
        <a href="http://<?php echo $serverIP; ?>:9876" target="_blank">
            http://<?php echo $serverIP; ?>:9876
        </a>
    </p>
    
    <div id="controls">
        <button id="startBtn" <?php echo $currentStatus === 'running' ? 'disabled' : ''; ?>>启动</button>
        <button id="stopBtn" <?php echo $currentStatus === 'stopped' ? 'disabled' : ''; ?>>停止</button>
        <button id="restartBtn" <?php echo $currentStatus === 'stopped' ? 'disabled' : ''; ?>>重启</button>
        <button id="refreshBtn">刷新状态</button>
    </div>
</div>

<div class="toast" id="toast"></div>

<script>
const elements = {
    status: document.getElementById('statusDisplay'),
    buttons: {
        start: document.getElementById('startBtn'),
        stop: document.getElementById('stopBtn'),
        restart: document.getElementById('restartBtn'),
        refresh: document.getElementById('refreshBtn')
    },
    toast: document.getElementById('toast')
};

function showToast(message, type = 'success') {
    elements.toast.textContent = message;
    elements.toast.className = `toast ${type}`;
    elements.toast.classList.add('show');
    setTimeout(() => elements.toast.classList.remove('show'), 3000);
}

async function fetchJSON(url) {
    const response = await fetch(url);
    const text = await response.text();
    try { return JSON.parse(text); } 
    catch { throw new Error('服务器返回了无效的响应'); }
}

function updateStatus(newStatus) {
    elements.status.textContent = newStatus;
    elements.status.className = `status-indicator status-${newStatus}`;
    elements.buttons.start.disabled = newStatus === 'running';
    elements.buttons.stop.disabled = newStatus === 'stopped';
    elements.buttons.restart.disabled = newStatus === 'stopped';
}

// 刷新状态
async function fetchStatus() {
    const data = await fetchJSON('?action=statusService&_=' + Date.now());
    if (data.success) updateStatus(data.status);
}

// 操作服务
async function performServiceAction(action, expectedStatus) {
    // 点击后立即显示变化
    updateStatus(expectedStatus);
    try {
        const data = await fetchJSON(`?action=${action}&_=${Date.now()}`);
        if (data.success) {
            updateStatus(data.status);
            showToast(data.message || '操作成功');
        } else {
            showToast(data.message || '操作失败', 'error');
            await fetchStatus(); // 恢复真实状态
        }
    } catch (err) {
        showToast(err.message || '操作异常', 'error');
        await fetchStatus();
    }
}

elements.buttons.start.addEventListener('click', () => performServiceAction('startService', 'running'));
elements.buttons.stop.addEventListener('click', () => performServiceAction('stopService', 'stopped'));
elements.buttons.restart.addEventListener('click', () => performServiceAction('restartService', 'running'));
elements.buttons.refresh.addEventListener('click', fetchStatus);
</script>
